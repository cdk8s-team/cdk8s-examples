package imports.co.elastic.k8s.apm;

/**
 * TLS defines options for configuring TLS for HTTP.
 */
@javax.annotation.Generated(value = "jsii-pacmak/1.79.0 (build b22f628)", date = "2023-03-31T16:02:12.131Z")
@software.amazon.jsii.Jsii(module = imports.co.elastic.k8s.apm.$Module.class, fqn = "coelastick8sapm.ApmServerSpecHttpTls")
@software.amazon.jsii.Jsii.Proxy(ApmServerSpecHttpTls.Jsii$Proxy.class)
public interface ApmServerSpecHttpTls extends software.amazon.jsii.JsiiSerializable {

    /**
     * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
     * <p>
     * The referenced secret should contain the following:
     * <p>
     * <ul>
     * <li><code>ca.crt</code>: The certificate authority (optional). - <code>tls.crt</code>: The certificate (or a chain). - <code>tls.key</code>: The private key to the first certificate in the certificate chain.</li>
     * </ul>
     */
    default @org.jetbrains.annotations.Nullable imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsCertificate getCertificate() {
        return null;
    }

    /**
     * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
     */
    default @org.jetbrains.annotations.Nullable imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsSelfSignedCertificate getSelfSignedCertificate() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link ApmServerSpecHttpTls}
     */
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ApmServerSpecHttpTls}
     */
    public static final class Builder implements software.amazon.jsii.Builder<ApmServerSpecHttpTls> {
        imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsCertificate certificate;
        imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsSelfSignedCertificate selfSignedCertificate;

        /**
         * Sets the value of {@link ApmServerSpecHttpTls#getCertificate}
         * @param certificate Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
         *                    The referenced secret should contain the following:
         *                    <p>
         *                    <ul>
         *                    <li><code>ca.crt</code>: The certificate authority (optional). - <code>tls.crt</code>: The certificate (or a chain). - <code>tls.key</code>: The private key to the first certificate in the certificate chain.</li>
         *                    </ul>
         * @return {@code this}
         */
        public Builder certificate(imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsCertificate certificate) {
            this.certificate = certificate;
            return this;
        }

        /**
         * Sets the value of {@link ApmServerSpecHttpTls#getSelfSignedCertificate}
         * @param selfSignedCertificate SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         * @return {@code this}
         */
        public Builder selfSignedCertificate(imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsSelfSignedCertificate selfSignedCertificate) {
            this.selfSignedCertificate = selfSignedCertificate;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ApmServerSpecHttpTls}
         * @throws NullPointerException if any required attribute was not provided
         */
        @Override
        public ApmServerSpecHttpTls build() {
            return new Jsii$Proxy(this);
        }
    }

    /**
     * An implementation for {@link ApmServerSpecHttpTls}
     */
    @software.amazon.jsii.Internal
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ApmServerSpecHttpTls {
        private final imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsCertificate certificate;
        private final imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsSelfSignedCertificate selfSignedCertificate;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.certificate = software.amazon.jsii.Kernel.get(this, "certificate", software.amazon.jsii.NativeType.forClass(imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsCertificate.class));
            this.selfSignedCertificate = software.amazon.jsii.Kernel.get(this, "selfSignedCertificate", software.amazon.jsii.NativeType.forClass(imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsSelfSignedCertificate.class));
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        protected Jsii$Proxy(final Builder builder) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.certificate = builder.certificate;
            this.selfSignedCertificate = builder.selfSignedCertificate;
        }

        @Override
        public final imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsCertificate getCertificate() {
            return this.certificate;
        }

        @Override
        public final imports.co.elastic.k8s.apm.ApmServerSpecHttpTlsSelfSignedCertificate getSelfSignedCertificate() {
            return this.selfSignedCertificate;
        }

        @Override
        @software.amazon.jsii.Internal
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getCertificate() != null) {
                data.set("certificate", om.valueToTree(this.getCertificate()));
            }
            if (this.getSelfSignedCertificate() != null) {
                data.set("selfSignedCertificate", om.valueToTree(this.getSelfSignedCertificate()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("coelastick8sapm.ApmServerSpecHttpTls"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public final boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ApmServerSpecHttpTls.Jsii$Proxy that = (ApmServerSpecHttpTls.Jsii$Proxy) o;

            if (this.certificate != null ? !this.certificate.equals(that.certificate) : that.certificate != null) return false;
            return this.selfSignedCertificate != null ? this.selfSignedCertificate.equals(that.selfSignedCertificate) : that.selfSignedCertificate == null;
        }

        @Override
        public final int hashCode() {
            int result = this.certificate != null ? this.certificate.hashCode() : 0;
            result = 31 * result + (this.selfSignedCertificate != null ? this.selfSignedCertificate.hashCode() : 0);
            return result;
        }
    }
}
