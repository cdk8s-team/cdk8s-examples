// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
 *
 * @schema Elasticsearch
 */
export class Elasticsearch extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Elasticsearch"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'elasticsearch.k8s.elastic.co/v1',
    kind: 'Elasticsearch',
  }

  /**
   * Renders a Kubernetes manifest for "Elasticsearch".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ElasticsearchProps = {}): any {
    return {
      ...Elasticsearch.GVK,
      ...toJson_ElasticsearchProps(props),
    };
  }

  /**
   * Defines a "Elasticsearch" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ElasticsearchProps = {}) {
    super(scope, id, {
      ...Elasticsearch.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Elasticsearch.GVK,
      ...toJson_ElasticsearchProps(resolved),
    };
  }
}

/**
 * Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
 *
 * @schema Elasticsearch
 */
export interface ElasticsearchProps {
  /**
   * @schema Elasticsearch#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ElasticsearchSpec holds the specification of an Elasticsearch cluster.
   *
   * @schema Elasticsearch#spec
   */
  readonly spec?: ElasticsearchSpec;

}

/**
 * Converts an object of type 'ElasticsearchProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchProps(obj: ElasticsearchProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ElasticsearchSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ElasticsearchSpec holds the specification of an Elasticsearch cluster.
 *
 * @schema ElasticsearchSpec
 */
export interface ElasticsearchSpec {
  /**
   * Auth contains user authentication and authorization security settings for Elasticsearch.
   *
   * @schema ElasticsearchSpec#auth
   */
  readonly auth?: ElasticsearchSpecAuth;

  /**
   * HTTP holds HTTP layer settings for Elasticsearch.
   *
   * @schema ElasticsearchSpec#http
   */
  readonly http?: ElasticsearchSpecHttp;

  /**
   * Image is the Elasticsearch Docker image to deploy.
   *
   * @schema ElasticsearchSpec#image
   */
  readonly image?: string;

  /**
   * NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates. See: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-orchestration.html
   *
   * @schema ElasticsearchSpec#nodeSets
   */
  readonly nodeSets: ElasticsearchSpecNodeSets[];

  /**
   * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
   *
   * @schema ElasticsearchSpec#podDisruptionBudget
   */
  readonly podDisruptionBudget?: ElasticsearchSpecPodDisruptionBudget;

  /**
   * RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
   *
   * @schema ElasticsearchSpec#remoteClusters
   */
  readonly remoteClusters?: ElasticsearchSpecRemoteClusters[];

  /**
   * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
   *
   * @schema ElasticsearchSpec#secureSettings
   */
  readonly secureSettings?: ElasticsearchSpecSecureSettings[];

  /**
   * ServiceAccountName is used to check access from the current resource to a resource (eg. a remote Elasticsearch cluster) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
   *
   * @schema ElasticsearchSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * Transport holds transport layer settings for Elasticsearch.
   *
   * @schema ElasticsearchSpec#transport
   */
  readonly transport?: ElasticsearchSpecTransport;

  /**
   * UpdateStrategy specifies how updates to the cluster should be performed.
   *
   * @schema ElasticsearchSpec#updateStrategy
   */
  readonly updateStrategy?: ElasticsearchSpecUpdateStrategy;

  /**
   * Version of Elasticsearch.
   *
   * @schema ElasticsearchSpec#version
   */
  readonly version: string;

}

/**
 * Converts an object of type 'ElasticsearchSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpec(obj: ElasticsearchSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auth': toJson_ElasticsearchSpecAuth(obj.auth),
    'http': toJson_ElasticsearchSpecHttp(obj.http),
    'image': obj.image,
    'nodeSets': obj.nodeSets?.map(y => toJson_ElasticsearchSpecNodeSets(y)),
    'podDisruptionBudget': toJson_ElasticsearchSpecPodDisruptionBudget(obj.podDisruptionBudget),
    'remoteClusters': obj.remoteClusters?.map(y => toJson_ElasticsearchSpecRemoteClusters(y)),
    'secureSettings': obj.secureSettings?.map(y => toJson_ElasticsearchSpecSecureSettings(y)),
    'serviceAccountName': obj.serviceAccountName,
    'transport': toJson_ElasticsearchSpecTransport(obj.transport),
    'updateStrategy': toJson_ElasticsearchSpecUpdateStrategy(obj.updateStrategy),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Auth contains user authentication and authorization security settings for Elasticsearch.
 *
 * @schema ElasticsearchSpecAuth
 */
export interface ElasticsearchSpecAuth {
  /**
   * FileRealm to propagate to the Elasticsearch cluster.
   *
   * @schema ElasticsearchSpecAuth#fileRealm
   */
  readonly fileRealm?: ElasticsearchSpecAuthFileRealm[];

  /**
   * Roles to propagate to the Elasticsearch cluster.
   *
   * @schema ElasticsearchSpecAuth#roles
   */
  readonly roles?: ElasticsearchSpecAuthRoles[];

}

/**
 * Converts an object of type 'ElasticsearchSpecAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecAuth(obj: ElasticsearchSpecAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fileRealm': obj.fileRealm?.map(y => toJson_ElasticsearchSpecAuthFileRealm(y)),
    'roles': obj.roles?.map(y => toJson_ElasticsearchSpecAuthRoles(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP holds HTTP layer settings for Elasticsearch.
 *
 * @schema ElasticsearchSpecHttp
 */
export interface ElasticsearchSpecHttp {
  /**
   * Service defines the template for the associated Kubernetes Service object.
   *
   * @schema ElasticsearchSpecHttp#service
   */
  readonly service?: ElasticsearchSpecHttpService;

  /**
   * TLS defines options for configuring TLS for HTTP.
   *
   * @schema ElasticsearchSpecHttp#tls
   */
  readonly tls?: ElasticsearchSpecHttpTls;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttp(obj: ElasticsearchSpecHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'service': toJson_ElasticsearchSpecHttpService(obj.service),
    'tls': toJson_ElasticsearchSpecHttpTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
 *
 * @schema ElasticsearchSpecNodeSets
 */
export interface ElasticsearchSpecNodeSets {
  /**
   * Config holds the Elasticsearch configuration.
   *
   * @schema ElasticsearchSpecNodeSets#config
   */
  readonly config?: any;

  /**
   * Count of Elasticsearch nodes to deploy.
   *
   * @schema ElasticsearchSpecNodeSets#count
   */
  readonly count: number;

  /**
   * Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
   *
   * @schema ElasticsearchSpecNodeSets#name
   */
  readonly name: string;

  /**
   * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
   *
   * @schema ElasticsearchSpecNodeSets#podTemplate
   */
  readonly podTemplate?: any;

  /**
   * VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name. See: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-volume-claim-templates.html
   *
   * @schema ElasticsearchSpecNodeSets#volumeClaimTemplates
   */
  readonly volumeClaimTemplates?: ElasticsearchSpecNodeSetsVolumeClaimTemplates[];

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSets(obj: ElasticsearchSpecNodeSets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'count': obj.count,
    'name': obj.name,
    'podTemplate': obj.podTemplate,
    'volumeClaimTemplates': obj.volumeClaimTemplates?.map(y => toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplates(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
 *
 * @schema ElasticsearchSpecPodDisruptionBudget
 */
export interface ElasticsearchSpecPodDisruptionBudget {
  /**
   * ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
   *
   * @schema ElasticsearchSpecPodDisruptionBudget#metadata
   */
  readonly metadata?: any;

  /**
   * Spec is the specification of the PDB.
   *
   * @schema ElasticsearchSpecPodDisruptionBudget#spec
   */
  readonly spec?: ElasticsearchSpecPodDisruptionBudgetSpec;

}

/**
 * Converts an object of type 'ElasticsearchSpecPodDisruptionBudget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecPodDisruptionBudget(obj: ElasticsearchSpecPodDisruptionBudget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ElasticsearchSpecPodDisruptionBudgetSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RemoteCluster declares a remote Elasticsearch cluster connection.
 *
 * @schema ElasticsearchSpecRemoteClusters
 */
export interface ElasticsearchSpecRemoteClusters {
  /**
   * ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
   *
   * @schema ElasticsearchSpecRemoteClusters#elasticsearchRef
   */
  readonly elasticsearchRef?: ElasticsearchSpecRemoteClustersElasticsearchRef;

  /**
   * Name is the name of the remote cluster as it is set in the Elasticsearch settings. The name is expected to be unique for each remote clusters.
   *
   * @schema ElasticsearchSpecRemoteClusters#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecRemoteClusters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecRemoteClusters(obj: ElasticsearchSpecRemoteClusters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'elasticsearchRef': toJson_ElasticsearchSpecRemoteClustersElasticsearchRef(obj.elasticsearchRef),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretSource defines a data source based on a Kubernetes Secret.
 *
 * @schema ElasticsearchSpecSecureSettings
 */
export interface ElasticsearchSpecSecureSettings {
  /**
   * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
   *
   * @schema ElasticsearchSpecSecureSettings#entries
   */
  readonly entries?: ElasticsearchSpecSecureSettingsEntries[];

  /**
   * SecretName is the name of the secret.
   *
   * @schema ElasticsearchSpecSecureSettings#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecSecureSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecSecureSettings(obj: ElasticsearchSpecSecureSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'entries': obj.entries?.map(y => toJson_ElasticsearchSpecSecureSettingsEntries(y)),
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Transport holds transport layer settings for Elasticsearch.
 *
 * @schema ElasticsearchSpecTransport
 */
export interface ElasticsearchSpecTransport {
  /**
   * Service defines the template for the associated Kubernetes Service object.
   *
   * @schema ElasticsearchSpecTransport#service
   */
  readonly service?: ElasticsearchSpecTransportService;

}

/**
 * Converts an object of type 'ElasticsearchSpecTransport' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecTransport(obj: ElasticsearchSpecTransport | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'service': toJson_ElasticsearchSpecTransportService(obj.service),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * UpdateStrategy specifies how updates to the cluster should be performed.
 *
 * @schema ElasticsearchSpecUpdateStrategy
 */
export interface ElasticsearchSpecUpdateStrategy {
  /**
   * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
   *
   * @schema ElasticsearchSpecUpdateStrategy#changeBudget
   */
  readonly changeBudget?: ElasticsearchSpecUpdateStrategyChangeBudget;

}

/**
 * Converts an object of type 'ElasticsearchSpecUpdateStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecUpdateStrategy(obj: ElasticsearchSpecUpdateStrategy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'changeBudget': toJson_ElasticsearchSpecUpdateStrategyChangeBudget(obj.changeBudget),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FileRealmSource references users to create in the Elasticsearch cluster.
 *
 * @schema ElasticsearchSpecAuthFileRealm
 */
export interface ElasticsearchSpecAuthFileRealm {
  /**
   * SecretName is the name of the secret.
   *
   * @schema ElasticsearchSpecAuthFileRealm#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecAuthFileRealm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecAuthFileRealm(obj: ElasticsearchSpecAuthFileRealm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RoleSource references roles to create in the Elasticsearch cluster.
 *
 * @schema ElasticsearchSpecAuthRoles
 */
export interface ElasticsearchSpecAuthRoles {
  /**
   * SecretName is the name of the secret.
   *
   * @schema ElasticsearchSpecAuthRoles#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecAuthRoles' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecAuthRoles(obj: ElasticsearchSpecAuthRoles | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service defines the template for the associated Kubernetes Service object.
 *
 * @schema ElasticsearchSpecHttpService
 */
export interface ElasticsearchSpecHttpService {
  /**
   * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
   *
   * @schema ElasticsearchSpecHttpService#metadata
   */
  readonly metadata?: any;

  /**
   * Spec is the specification of the service.
   *
   * @schema ElasticsearchSpecHttpService#spec
   */
  readonly spec?: ElasticsearchSpecHttpServiceSpec;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpService(obj: ElasticsearchSpecHttpService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ElasticsearchSpecHttpServiceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS defines options for configuring TLS for HTTP.
 *
 * @schema ElasticsearchSpecHttpTls
 */
export interface ElasticsearchSpecHttpTls {
  /**
   * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
   * - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
   *
   * @schema ElasticsearchSpecHttpTls#certificate
   */
  readonly certificate?: ElasticsearchSpecHttpTlsCertificate;

  /**
   * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
   *
   * @schema ElasticsearchSpecHttpTls#selfSignedCertificate
   */
  readonly selfSignedCertificate?: ElasticsearchSpecHttpTlsSelfSignedCertificate;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpTls(obj: ElasticsearchSpecHttpTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificate': toJson_ElasticsearchSpecHttpTlsCertificate(obj.certificate),
    'selfSignedCertificate': toJson_ElasticsearchSpecHttpTlsSelfSignedCertificate(obj.selfSignedCertificate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PersistentVolumeClaim is a user's request for and claim to a persistent volume
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplates
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplates {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplates#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplates#kind
   */
  readonly kind?: string;

  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplates#metadata
   */
  readonly metadata?: any;

  /**
   * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplates#spec
   */
  readonly spec?: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec;

  /**
   * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplates#status
   */
  readonly status?: ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus;

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplates(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplates | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': obj.metadata,
    'spec': toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec(obj.spec),
    'status': toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec is the specification of the PDB.
 *
 * @schema ElasticsearchSpecPodDisruptionBudgetSpec
 */
export interface ElasticsearchSpecPodDisruptionBudgetSpec {
  /**
   * An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpec#maxUnavailable
   */
  readonly maxUnavailable?: ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable;

  /**
   * An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpec#minAvailable
   */
  readonly minAvailable?: ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable;

  /**
   * Label query over pods whose evictions are managed by the disruption budget.
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpec#selector
   */
  readonly selector?: ElasticsearchSpecPodDisruptionBudgetSpecSelector;

}

/**
 * Converts an object of type 'ElasticsearchSpecPodDisruptionBudgetSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecPodDisruptionBudgetSpec(obj: ElasticsearchSpecPodDisruptionBudgetSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxUnavailable': obj.maxUnavailable?.value,
    'minAvailable': obj.minAvailable?.value,
    'selector': toJson_ElasticsearchSpecPodDisruptionBudgetSpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
 *
 * @schema ElasticsearchSpecRemoteClustersElasticsearchRef
 */
export interface ElasticsearchSpecRemoteClustersElasticsearchRef {
  /**
   * Name of the Kubernetes object.
   *
   * @schema ElasticsearchSpecRemoteClustersElasticsearchRef#name
   */
  readonly name: string;

  /**
   * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
   *
   * @schema ElasticsearchSpecRemoteClustersElasticsearchRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecRemoteClustersElasticsearchRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecRemoteClustersElasticsearchRef(obj: ElasticsearchSpecRemoteClustersElasticsearchRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KeyToPath defines how to map a key in a Secret object to a filesystem path.
 *
 * @schema ElasticsearchSpecSecureSettingsEntries
 */
export interface ElasticsearchSpecSecureSettingsEntries {
  /**
   * Key is the key contained in the secret.
   *
   * @schema ElasticsearchSpecSecureSettingsEntries#key
   */
  readonly key: string;

  /**
   * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
   *
   * @schema ElasticsearchSpecSecureSettingsEntries#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecSecureSettingsEntries' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecSecureSettingsEntries(obj: ElasticsearchSpecSecureSettingsEntries | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service defines the template for the associated Kubernetes Service object.
 *
 * @schema ElasticsearchSpecTransportService
 */
export interface ElasticsearchSpecTransportService {
  /**
   * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
   *
   * @schema ElasticsearchSpecTransportService#metadata
   */
  readonly metadata?: any;

  /**
   * Spec is the specification of the service.
   *
   * @schema ElasticsearchSpecTransportService#spec
   */
  readonly spec?: ElasticsearchSpecTransportServiceSpec;

}

/**
 * Converts an object of type 'ElasticsearchSpecTransportService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecTransportService(obj: ElasticsearchSpecTransportService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ElasticsearchSpecTransportServiceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
 *
 * @schema ElasticsearchSpecUpdateStrategyChangeBudget
 */
export interface ElasticsearchSpecUpdateStrategyChangeBudget {
  /**
   * MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
   *
   * @default unbounded if not specified.
   * @schema ElasticsearchSpecUpdateStrategyChangeBudget#maxSurge
   */
  readonly maxSurge?: number;

  /**
   * MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
   *
   * @default 1 if not specified.
   * @schema ElasticsearchSpecUpdateStrategyChangeBudget#maxUnavailable
   */
  readonly maxUnavailable?: number;

}

/**
 * Converts an object of type 'ElasticsearchSpecUpdateStrategyChangeBudget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecUpdateStrategyChangeBudget(obj: ElasticsearchSpecUpdateStrategyChangeBudget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxSurge': obj.maxSurge,
    'maxUnavailable': obj.maxUnavailable,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec is the specification of the service.
 *
 * @schema ElasticsearchSpecHttpServiceSpec
 */
export interface ElasticsearchSpecHttpServiceSpec {
  /**
   * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @schema ElasticsearchSpecHttpServiceSpec#clusterIP
   */
  readonly clusterIp?: string;

  /**
   * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#externalIPs
   */
  readonly externalIPs?: string[];

  /**
   * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#externalName
   */
  readonly externalName?: string;

  /**
   * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#externalTrafficPolicy
   */
  readonly externalTrafficPolicy?: string;

  /**
   * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#healthCheckNodePort
   */
  readonly healthCheckNodePort?: number;

  /**
   * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#ipFamily
   */
  readonly ipFamily?: string;

  /**
   * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#loadBalancerIP
   */
  readonly loadBalancerIp?: string;

  /**
   * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
   *
   * @schema ElasticsearchSpecHttpServiceSpec#loadBalancerSourceRanges
   */
  readonly loadBalancerSourceRanges?: string[];

  /**
   * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @schema ElasticsearchSpecHttpServiceSpec#ports
   */
  readonly ports?: ElasticsearchSpecHttpServiceSpecPorts[];

  /**
   * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#publishNotReadyAddresses
   */
  readonly publishNotReadyAddresses?: boolean;

  /**
   * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
   *
   * @schema ElasticsearchSpecHttpServiceSpec#selector
   */
  readonly selector?: { [key: string]: string };

  /**
   * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @default None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   * @schema ElasticsearchSpecHttpServiceSpec#sessionAffinity
   */
  readonly sessionAffinity?: string;

  /**
   * sessionAffinityConfig contains the configurations of session affinity.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#sessionAffinityConfig
   */
  readonly sessionAffinityConfig?: ElasticsearchSpecHttpServiceSpecSessionAffinityConfig;

  /**
   * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
   *
   * @schema ElasticsearchSpecHttpServiceSpec#topologyKeys
   */
  readonly topologyKeys?: string[];

  /**
   * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
   *
   * @default ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
   * @schema ElasticsearchSpecHttpServiceSpec#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpServiceSpec(obj: ElasticsearchSpecHttpServiceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterIP': obj.clusterIp,
    'externalIPs': obj.externalIPs?.map(y => y),
    'externalName': obj.externalName,
    'externalTrafficPolicy': obj.externalTrafficPolicy,
    'healthCheckNodePort': obj.healthCheckNodePort,
    'ipFamily': obj.ipFamily,
    'loadBalancerIP': obj.loadBalancerIp,
    'loadBalancerSourceRanges': obj.loadBalancerSourceRanges?.map(y => y),
    'ports': obj.ports?.map(y => toJson_ElasticsearchSpecHttpServiceSpecPorts(y)),
    'publishNotReadyAddresses': obj.publishNotReadyAddresses,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sessionAffinity': obj.sessionAffinity,
    'sessionAffinityConfig': toJson_ElasticsearchSpecHttpServiceSpecSessionAffinityConfig(obj.sessionAffinityConfig),
    'topologyKeys': obj.topologyKeys?.map(y => y),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
 * - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
 *
 * @schema ElasticsearchSpecHttpTlsCertificate
 */
export interface ElasticsearchSpecHttpTlsCertificate {
  /**
   * SecretName is the name of the secret.
   *
   * @schema ElasticsearchSpecHttpTlsCertificate#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpTlsCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpTlsCertificate(obj: ElasticsearchSpecHttpTlsCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
 *
 * @schema ElasticsearchSpecHttpTlsSelfSignedCertificate
 */
export interface ElasticsearchSpecHttpTlsSelfSignedCertificate {
  /**
   * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
   *
   * @schema ElasticsearchSpecHttpTlsSelfSignedCertificate#disabled
   */
  readonly disabled?: boolean;

  /**
   * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
   *
   * @schema ElasticsearchSpecHttpTlsSelfSignedCertificate#subjectAltNames
   */
  readonly subjectAltNames?: ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames[];

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpTlsSelfSignedCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpTlsSelfSignedCertificate(obj: ElasticsearchSpecHttpTlsSelfSignedCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
    'subjectAltNames': obj.subjectAltNames?.map(y => toJson_ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
  /**
   * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec#accessModes
   */
  readonly accessModes?: string[];

  /**
   * This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec#dataSource
   */
  readonly dataSource?: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource;

  /**
   * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec#resources
   */
  readonly resources?: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources;

  /**
   * A label query over volumes to consider for binding.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec#selector
   */
  readonly selector?: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector;

  /**
   * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec#volumeMode
   */
  readonly volumeMode?: string;

  /**
   * VolumeName is the binding reference to the PersistentVolume backing this claim.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessModes': obj.accessModes?.map(y => y),
    'dataSource': toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource(obj.dataSource),
    'resources': toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources(obj.resources),
    'selector': toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector(obj.selector),
    'storageClassName': obj.storageClassName,
    'volumeMode': obj.volumeMode,
    'volumeName': obj.volumeName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus {
  /**
   * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus#accessModes
   */
  readonly accessModes?: string[];

  /**
   * Represents the actual resources of the underlying volume.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus#capacity
   */
  readonly capacity?: { [key: string]: ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity };

  /**
   * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus#conditions
   */
  readonly conditions?: ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions[];

  /**
   * Phase represents the current phase of PersistentVolumeClaim.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus#phase
   */
  readonly phase?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessModes': obj.accessModes?.map(y => y),
    'capacity': ((obj.capacity) === undefined) ? undefined : (Object.entries(obj.capacity).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'conditions': obj.conditions?.map(y => toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions(y)),
    'phase': obj.phase,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
 *
 * @schema ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable
 */
export class ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable {
  public static fromNumber(value: number): ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable {
    return new ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable(value);
  }
  public static fromString(value: string): ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable {
    return new ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
 *
 * @schema ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable
 */
export class ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable {
  public static fromNumber(value: number): ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable {
    return new ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable(value);
  }
  public static fromString(value: string): ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable {
    return new ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Label query over pods whose evictions are managed by the disruption budget.
 *
 * @schema ElasticsearchSpecPodDisruptionBudgetSpecSelector
 */
export interface ElasticsearchSpecPodDisruptionBudgetSpecSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpecSelector#matchExpressions
   */
  readonly matchExpressions?: ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ElasticsearchSpecPodDisruptionBudgetSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecPodDisruptionBudgetSpecSelector(obj: ElasticsearchSpecPodDisruptionBudgetSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec is the specification of the service.
 *
 * @schema ElasticsearchSpecTransportServiceSpec
 */
export interface ElasticsearchSpecTransportServiceSpec {
  /**
   * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @schema ElasticsearchSpecTransportServiceSpec#clusterIP
   */
  readonly clusterIp?: string;

  /**
   * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#externalIPs
   */
  readonly externalIPs?: string[];

  /**
   * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#externalName
   */
  readonly externalName?: string;

  /**
   * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#externalTrafficPolicy
   */
  readonly externalTrafficPolicy?: string;

  /**
   * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#healthCheckNodePort
   */
  readonly healthCheckNodePort?: number;

  /**
   * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#ipFamily
   */
  readonly ipFamily?: string;

  /**
   * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#loadBalancerIP
   */
  readonly loadBalancerIp?: string;

  /**
   * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
   *
   * @schema ElasticsearchSpecTransportServiceSpec#loadBalancerSourceRanges
   */
  readonly loadBalancerSourceRanges?: string[];

  /**
   * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @schema ElasticsearchSpecTransportServiceSpec#ports
   */
  readonly ports?: ElasticsearchSpecTransportServiceSpecPorts[];

  /**
   * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#publishNotReadyAddresses
   */
  readonly publishNotReadyAddresses?: boolean;

  /**
   * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
   *
   * @schema ElasticsearchSpecTransportServiceSpec#selector
   */
  readonly selector?: { [key: string]: string };

  /**
   * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @default None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   * @schema ElasticsearchSpecTransportServiceSpec#sessionAffinity
   */
  readonly sessionAffinity?: string;

  /**
   * sessionAffinityConfig contains the configurations of session affinity.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#sessionAffinityConfig
   */
  readonly sessionAffinityConfig?: ElasticsearchSpecTransportServiceSpecSessionAffinityConfig;

  /**
   * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
   *
   * @schema ElasticsearchSpecTransportServiceSpec#topologyKeys
   */
  readonly topologyKeys?: string[];

  /**
   * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
   *
   * @default ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
   * @schema ElasticsearchSpecTransportServiceSpec#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecTransportServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecTransportServiceSpec(obj: ElasticsearchSpecTransportServiceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterIP': obj.clusterIp,
    'externalIPs': obj.externalIPs?.map(y => y),
    'externalName': obj.externalName,
    'externalTrafficPolicy': obj.externalTrafficPolicy,
    'healthCheckNodePort': obj.healthCheckNodePort,
    'ipFamily': obj.ipFamily,
    'loadBalancerIP': obj.loadBalancerIp,
    'loadBalancerSourceRanges': obj.loadBalancerSourceRanges?.map(y => y),
    'ports': obj.ports?.map(y => toJson_ElasticsearchSpecTransportServiceSpecPorts(y)),
    'publishNotReadyAddresses': obj.publishNotReadyAddresses,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sessionAffinity': obj.sessionAffinity,
    'sessionAffinityConfig': toJson_ElasticsearchSpecTransportServiceSpecSessionAffinityConfig(obj.sessionAffinityConfig),
    'topologyKeys': obj.topologyKeys?.map(y => y),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ServicePort contains information on service's port.
 *
 * @schema ElasticsearchSpecHttpServiceSpecPorts
 */
export interface ElasticsearchSpecHttpServiceSpecPorts {
  /**
   * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
   *
   * @schema ElasticsearchSpecHttpServiceSpecPorts#name
   */
  readonly name?: string;

  /**
   * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
   *
   * @default to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
   * @schema ElasticsearchSpecHttpServiceSpecPorts#nodePort
   */
  readonly nodePort?: number;

  /**
   * The port that will be exposed by this service.
   *
   * @schema ElasticsearchSpecHttpServiceSpecPorts#port
   */
  readonly port: number;

  /**
   * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
   *
   * @default TCP.
   * @schema ElasticsearchSpecHttpServiceSpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
   *
   * @schema ElasticsearchSpecHttpServiceSpecPorts#targetPort
   */
  readonly targetPort?: ElasticsearchSpecHttpServiceSpecPortsTargetPort;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpServiceSpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpServiceSpecPorts(obj: ElasticsearchSpecHttpServiceSpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'nodePort': obj.nodePort,
    'port': obj.port,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * sessionAffinityConfig contains the configurations of session affinity.
 *
 * @schema ElasticsearchSpecHttpServiceSpecSessionAffinityConfig
 */
export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
  /**
   * clientIP contains the configurations of Client IP based session affinity.
   *
   * @schema ElasticsearchSpecHttpServiceSpecSessionAffinityConfig#clientIP
   */
  readonly clientIp?: ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpServiceSpecSessionAffinityConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpServiceSpecSessionAffinityConfig(obj: ElasticsearchSpecHttpServiceSpecSessionAffinityConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientIP': toJson_ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp(obj.clientIp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SubjectAlternativeName represents a SAN entry in a x509 certificate.
 *
 * @schema ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames
 */
export interface ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
  /**
   * DNS is the DNS name of the subject.
   *
   * @schema ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames#dns
   */
  readonly dns?: string;

  /**
   * IP is the IP address of the subject.
   *
   * @schema ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames#ip
   */
  readonly ip?: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames(obj: ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dns': obj.dns,
    'ip': obj.ip,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
  /**
   * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource#apiGroup
   */
  readonly apiGroup?: string;

  /**
   * Kind is the type of resource being referenced
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource#kind
   */
  readonly kind: string;

  /**
   * Name is the name of resource being referenced
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiGroup': obj.apiGroup,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources#limits
   */
  readonly limits?: { [key: string]: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources#requests
   */
  readonly requests?: { [key: string]: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests };

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over volumes to consider for binding.
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector#matchExpressions
   */
  readonly matchExpressions?: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity
 */
export class ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity {
  public static fromNumber(value: number): ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity {
    return new ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity(value);
  }
  public static fromString(value: string): ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity {
    return new ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * PersistentVolumeClaimCondition contails details about state of pvc
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions {
  /**
   * Last time we probed the condition.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions#lastProbeTime
   */
  readonly lastProbeTime?: Date;

  /**
   * Last time the condition transitioned from one status to another.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime?: Date;

  /**
   * Human-readable message indicating details about last transition.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions#message
   */
  readonly message?: string;

  /**
   * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions#reason
   */
  readonly reason?: string;

  /**
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions#status
   */
  readonly status: string;

  /**
   * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastProbeTime': obj.lastProbeTime?.toISOString(),
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions
 */
export interface ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions(obj: ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ServicePort contains information on service's port.
 *
 * @schema ElasticsearchSpecTransportServiceSpecPorts
 */
export interface ElasticsearchSpecTransportServiceSpecPorts {
  /**
   * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
   *
   * @schema ElasticsearchSpecTransportServiceSpecPorts#name
   */
  readonly name?: string;

  /**
   * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
   *
   * @default to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
   * @schema ElasticsearchSpecTransportServiceSpecPorts#nodePort
   */
  readonly nodePort?: number;

  /**
   * The port that will be exposed by this service.
   *
   * @schema ElasticsearchSpecTransportServiceSpecPorts#port
   */
  readonly port: number;

  /**
   * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
   *
   * @default TCP.
   * @schema ElasticsearchSpecTransportServiceSpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
   *
   * @schema ElasticsearchSpecTransportServiceSpecPorts#targetPort
   */
  readonly targetPort?: ElasticsearchSpecTransportServiceSpecPortsTargetPort;

}

/**
 * Converts an object of type 'ElasticsearchSpecTransportServiceSpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecTransportServiceSpecPorts(obj: ElasticsearchSpecTransportServiceSpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'nodePort': obj.nodePort,
    'port': obj.port,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * sessionAffinityConfig contains the configurations of session affinity.
 *
 * @schema ElasticsearchSpecTransportServiceSpecSessionAffinityConfig
 */
export interface ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
  /**
   * clientIP contains the configurations of Client IP based session affinity.
   *
   * @schema ElasticsearchSpecTransportServiceSpecSessionAffinityConfig#clientIP
   */
  readonly clientIp?: ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp;

}

/**
 * Converts an object of type 'ElasticsearchSpecTransportServiceSpecSessionAffinityConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecTransportServiceSpecSessionAffinityConfig(obj: ElasticsearchSpecTransportServiceSpecSessionAffinityConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientIP': toJson_ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp(obj.clientIp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
 *
 * @schema ElasticsearchSpecHttpServiceSpecPortsTargetPort
 */
export class ElasticsearchSpecHttpServiceSpecPortsTargetPort {
  public static fromNumber(value: number): ElasticsearchSpecHttpServiceSpecPortsTargetPort {
    return new ElasticsearchSpecHttpServiceSpecPortsTargetPort(value);
  }
  public static fromString(value: string): ElasticsearchSpecHttpServiceSpecPortsTargetPort {
    return new ElasticsearchSpecHttpServiceSpecPortsTargetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * clientIP contains the configurations of Client IP based session affinity.
 *
 * @schema ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp
 */
export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
  /**
   * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
   *
   * @schema ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp(obj: ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits
 */
export class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits {
  public static fromNumber(value: number): ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits {
    return new ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits(value);
  }
  public static fromString(value: string): ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits {
    return new ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests
 */
export class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests {
  public static fromNumber(value: number): ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests {
    return new ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests(value);
  }
  public static fromString(value: string): ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests {
    return new ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions
 */
export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions(obj: ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
 *
 * @schema ElasticsearchSpecTransportServiceSpecPortsTargetPort
 */
export class ElasticsearchSpecTransportServiceSpecPortsTargetPort {
  public static fromNumber(value: number): ElasticsearchSpecTransportServiceSpecPortsTargetPort {
    return new ElasticsearchSpecTransportServiceSpecPortsTargetPort(value);
  }
  public static fromString(value: string): ElasticsearchSpecTransportServiceSpecPortsTargetPort {
    return new ElasticsearchSpecTransportServiceSpecPortsTargetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * clientIP contains the configurations of Client IP based session affinity.
 *
 * @schema ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp
 */
export interface ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp {
  /**
   * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
   *
   * @schema ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp(obj: ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

