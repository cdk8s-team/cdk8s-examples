// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Kibana represents a Kibana resource in a Kubernetes cluster.
 *
 * @schema Kibana
 */
export class Kibana extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Kibana"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'kibana.k8s.elastic.co/v1',
    kind: 'Kibana',
  }

  /**
   * Renders a Kubernetes manifest for "Kibana".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: KibanaProps = {}): any {
    return {
      ...Kibana.GVK,
      ...toJson_KibanaProps(props),
    };
  }

  /**
   * Defines a "Kibana" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: KibanaProps = {}) {
    super(scope, id, {
      ...Kibana.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Kibana.GVK,
      ...toJson_KibanaProps(resolved),
    };
  }
}

/**
 * Kibana represents a Kibana resource in a Kubernetes cluster.
 *
 * @schema Kibana
 */
export interface KibanaProps {
  /**
   * @schema Kibana#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * KibanaSpec holds the specification of a Kibana instance.
   *
   * @schema Kibana#spec
   */
  readonly spec?: KibanaSpec;

}

/**
 * Converts an object of type 'KibanaProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaProps(obj: KibanaProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_KibanaSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KibanaSpec holds the specification of a Kibana instance.
 *
 * @schema KibanaSpec
 */
export interface KibanaSpec {
  /**
   * Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
   *
   * @schema KibanaSpec#config
   */
  readonly config?: any;

  /**
   * Count of Kibana instances to deploy.
   *
   * @schema KibanaSpec#count
   */
  readonly count?: number;

  /**
   * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
   *
   * @schema KibanaSpec#elasticsearchRef
   */
  readonly elasticsearchRef?: KibanaSpecElasticsearchRef;

  /**
   * HTTP holds the HTTP layer configuration for Kibana.
   *
   * @schema KibanaSpec#http
   */
  readonly http?: KibanaSpecHttp;

  /**
   * Image is the Kibana Docker image to deploy.
   *
   * @schema KibanaSpec#image
   */
  readonly image?: string;

  /**
   * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
   *
   * @schema KibanaSpec#podTemplate
   */
  readonly podTemplate?: any;

  /**
   * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
   *
   * @schema KibanaSpec#secureSettings
   */
  readonly secureSettings?: KibanaSpecSecureSettings[];

  /**
   * ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
   *
   * @schema KibanaSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * Version of Kibana.
   *
   * @schema KibanaSpec#version
   */
  readonly version: string;

}

/**
 * Converts an object of type 'KibanaSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpec(obj: KibanaSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'count': obj.count,
    'elasticsearchRef': toJson_KibanaSpecElasticsearchRef(obj.elasticsearchRef),
    'http': toJson_KibanaSpecHttp(obj.http),
    'image': obj.image,
    'podTemplate': obj.podTemplate,
    'secureSettings': obj.secureSettings?.map(y => toJson_KibanaSpecSecureSettings(y)),
    'serviceAccountName': obj.serviceAccountName,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
 *
 * @schema KibanaSpecElasticsearchRef
 */
export interface KibanaSpecElasticsearchRef {
  /**
   * Name of the Kubernetes object.
   *
   * @schema KibanaSpecElasticsearchRef#name
   */
  readonly name: string;

  /**
   * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
   *
   * @schema KibanaSpecElasticsearchRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'KibanaSpecElasticsearchRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecElasticsearchRef(obj: KibanaSpecElasticsearchRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP holds the HTTP layer configuration for Kibana.
 *
 * @schema KibanaSpecHttp
 */
export interface KibanaSpecHttp {
  /**
   * Service defines the template for the associated Kubernetes Service object.
   *
   * @schema KibanaSpecHttp#service
   */
  readonly service?: KibanaSpecHttpService;

  /**
   * TLS defines options for configuring TLS for HTTP.
   *
   * @schema KibanaSpecHttp#tls
   */
  readonly tls?: KibanaSpecHttpTls;

}

/**
 * Converts an object of type 'KibanaSpecHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttp(obj: KibanaSpecHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'service': toJson_KibanaSpecHttpService(obj.service),
    'tls': toJson_KibanaSpecHttpTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretSource defines a data source based on a Kubernetes Secret.
 *
 * @schema KibanaSpecSecureSettings
 */
export interface KibanaSpecSecureSettings {
  /**
   * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
   *
   * @schema KibanaSpecSecureSettings#entries
   */
  readonly entries?: KibanaSpecSecureSettingsEntries[];

  /**
   * SecretName is the name of the secret.
   *
   * @schema KibanaSpecSecureSettings#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'KibanaSpecSecureSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecSecureSettings(obj: KibanaSpecSecureSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'entries': obj.entries?.map(y => toJson_KibanaSpecSecureSettingsEntries(y)),
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service defines the template for the associated Kubernetes Service object.
 *
 * @schema KibanaSpecHttpService
 */
export interface KibanaSpecHttpService {
  /**
   * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
   *
   * @schema KibanaSpecHttpService#metadata
   */
  readonly metadata?: any;

  /**
   * Spec is the specification of the service.
   *
   * @schema KibanaSpecHttpService#spec
   */
  readonly spec?: KibanaSpecHttpServiceSpec;

}

/**
 * Converts an object of type 'KibanaSpecHttpService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpService(obj: KibanaSpecHttpService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_KibanaSpecHttpServiceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS defines options for configuring TLS for HTTP.
 *
 * @schema KibanaSpecHttpTls
 */
export interface KibanaSpecHttpTls {
  /**
   * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
   * - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
   *
   * @schema KibanaSpecHttpTls#certificate
   */
  readonly certificate?: KibanaSpecHttpTlsCertificate;

  /**
   * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
   *
   * @schema KibanaSpecHttpTls#selfSignedCertificate
   */
  readonly selfSignedCertificate?: KibanaSpecHttpTlsSelfSignedCertificate;

}

/**
 * Converts an object of type 'KibanaSpecHttpTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpTls(obj: KibanaSpecHttpTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificate': toJson_KibanaSpecHttpTlsCertificate(obj.certificate),
    'selfSignedCertificate': toJson_KibanaSpecHttpTlsSelfSignedCertificate(obj.selfSignedCertificate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KeyToPath defines how to map a key in a Secret object to a filesystem path.
 *
 * @schema KibanaSpecSecureSettingsEntries
 */
export interface KibanaSpecSecureSettingsEntries {
  /**
   * Key is the key contained in the secret.
   *
   * @schema KibanaSpecSecureSettingsEntries#key
   */
  readonly key: string;

  /**
   * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
   *
   * @schema KibanaSpecSecureSettingsEntries#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'KibanaSpecSecureSettingsEntries' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecSecureSettingsEntries(obj: KibanaSpecSecureSettingsEntries | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec is the specification of the service.
 *
 * @schema KibanaSpecHttpServiceSpec
 */
export interface KibanaSpecHttpServiceSpec {
  /**
   * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @schema KibanaSpecHttpServiceSpec#clusterIP
   */
  readonly clusterIp?: string;

  /**
   * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
   *
   * @schema KibanaSpecHttpServiceSpec#externalIPs
   */
  readonly externalIPs?: string[];

  /**
   * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
   *
   * @schema KibanaSpecHttpServiceSpec#externalName
   */
  readonly externalName?: string;

  /**
   * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
   *
   * @schema KibanaSpecHttpServiceSpec#externalTrafficPolicy
   */
  readonly externalTrafficPolicy?: string;

  /**
   * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
   *
   * @schema KibanaSpecHttpServiceSpec#healthCheckNodePort
   */
  readonly healthCheckNodePort?: number;

  /**
   * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
   *
   * @schema KibanaSpecHttpServiceSpec#ipFamily
   */
  readonly ipFamily?: string;

  /**
   * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
   *
   * @schema KibanaSpecHttpServiceSpec#loadBalancerIP
   */
  readonly loadBalancerIp?: string;

  /**
   * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
   *
   * @schema KibanaSpecHttpServiceSpec#loadBalancerSourceRanges
   */
  readonly loadBalancerSourceRanges?: string[];

  /**
   * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @schema KibanaSpecHttpServiceSpec#ports
   */
  readonly ports?: KibanaSpecHttpServiceSpecPorts[];

  /**
   * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
   *
   * @schema KibanaSpecHttpServiceSpec#publishNotReadyAddresses
   */
  readonly publishNotReadyAddresses?: boolean;

  /**
   * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
   *
   * @schema KibanaSpecHttpServiceSpec#selector
   */
  readonly selector?: { [key: string]: string };

  /**
   * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   *
   * @default None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
   * @schema KibanaSpecHttpServiceSpec#sessionAffinity
   */
  readonly sessionAffinity?: string;

  /**
   * sessionAffinityConfig contains the configurations of session affinity.
   *
   * @schema KibanaSpecHttpServiceSpec#sessionAffinityConfig
   */
  readonly sessionAffinityConfig?: KibanaSpecHttpServiceSpecSessionAffinityConfig;

  /**
   * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
   *
   * @schema KibanaSpecHttpServiceSpec#topologyKeys
   */
  readonly topologyKeys?: string[];

  /**
   * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
   *
   * @default ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
   * @schema KibanaSpecHttpServiceSpec#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'KibanaSpecHttpServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpServiceSpec(obj: KibanaSpecHttpServiceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterIP': obj.clusterIp,
    'externalIPs': obj.externalIPs?.map(y => y),
    'externalName': obj.externalName,
    'externalTrafficPolicy': obj.externalTrafficPolicy,
    'healthCheckNodePort': obj.healthCheckNodePort,
    'ipFamily': obj.ipFamily,
    'loadBalancerIP': obj.loadBalancerIp,
    'loadBalancerSourceRanges': obj.loadBalancerSourceRanges?.map(y => y),
    'ports': obj.ports?.map(y => toJson_KibanaSpecHttpServiceSpecPorts(y)),
    'publishNotReadyAddresses': obj.publishNotReadyAddresses,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sessionAffinity': obj.sessionAffinity,
    'sessionAffinityConfig': toJson_KibanaSpecHttpServiceSpecSessionAffinityConfig(obj.sessionAffinityConfig),
    'topologyKeys': obj.topologyKeys?.map(y => y),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
 * - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
 *
 * @schema KibanaSpecHttpTlsCertificate
 */
export interface KibanaSpecHttpTlsCertificate {
  /**
   * SecretName is the name of the secret.
   *
   * @schema KibanaSpecHttpTlsCertificate#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'KibanaSpecHttpTlsCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpTlsCertificate(obj: KibanaSpecHttpTlsCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
 *
 * @schema KibanaSpecHttpTlsSelfSignedCertificate
 */
export interface KibanaSpecHttpTlsSelfSignedCertificate {
  /**
   * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
   *
   * @schema KibanaSpecHttpTlsSelfSignedCertificate#disabled
   */
  readonly disabled?: boolean;

  /**
   * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
   *
   * @schema KibanaSpecHttpTlsSelfSignedCertificate#subjectAltNames
   */
  readonly subjectAltNames?: KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames[];

}

/**
 * Converts an object of type 'KibanaSpecHttpTlsSelfSignedCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpTlsSelfSignedCertificate(obj: KibanaSpecHttpTlsSelfSignedCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
    'subjectAltNames': obj.subjectAltNames?.map(y => toJson_KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ServicePort contains information on service's port.
 *
 * @schema KibanaSpecHttpServiceSpecPorts
 */
export interface KibanaSpecHttpServiceSpecPorts {
  /**
   * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
   *
   * @schema KibanaSpecHttpServiceSpecPorts#name
   */
  readonly name?: string;

  /**
   * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
   *
   * @default to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
   * @schema KibanaSpecHttpServiceSpecPorts#nodePort
   */
  readonly nodePort?: number;

  /**
   * The port that will be exposed by this service.
   *
   * @schema KibanaSpecHttpServiceSpecPorts#port
   */
  readonly port: number;

  /**
   * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
   *
   * @default TCP.
   * @schema KibanaSpecHttpServiceSpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
   *
   * @schema KibanaSpecHttpServiceSpecPorts#targetPort
   */
  readonly targetPort?: KibanaSpecHttpServiceSpecPortsTargetPort;

}

/**
 * Converts an object of type 'KibanaSpecHttpServiceSpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpServiceSpecPorts(obj: KibanaSpecHttpServiceSpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'nodePort': obj.nodePort,
    'port': obj.port,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * sessionAffinityConfig contains the configurations of session affinity.
 *
 * @schema KibanaSpecHttpServiceSpecSessionAffinityConfig
 */
export interface KibanaSpecHttpServiceSpecSessionAffinityConfig {
  /**
   * clientIP contains the configurations of Client IP based session affinity.
   *
   * @schema KibanaSpecHttpServiceSpecSessionAffinityConfig#clientIP
   */
  readonly clientIp?: KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp;

}

/**
 * Converts an object of type 'KibanaSpecHttpServiceSpecSessionAffinityConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpServiceSpecSessionAffinityConfig(obj: KibanaSpecHttpServiceSpecSessionAffinityConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientIP': toJson_KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp(obj.clientIp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SubjectAlternativeName represents a SAN entry in a x509 certificate.
 *
 * @schema KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames
 */
export interface KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
  /**
   * DNS is the DNS name of the subject.
   *
   * @schema KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames#dns
   */
  readonly dns?: string;

  /**
   * IP is the IP address of the subject.
   *
   * @schema KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames#ip
   */
  readonly ip?: string;

}

/**
 * Converts an object of type 'KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames(obj: KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dns': obj.dns,
    'ip': obj.ip,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
 *
 * @schema KibanaSpecHttpServiceSpecPortsTargetPort
 */
export class KibanaSpecHttpServiceSpecPortsTargetPort {
  public static fromNumber(value: number): KibanaSpecHttpServiceSpecPortsTargetPort {
    return new KibanaSpecHttpServiceSpecPortsTargetPort(value);
  }
  public static fromString(value: string): KibanaSpecHttpServiceSpecPortsTargetPort {
    return new KibanaSpecHttpServiceSpecPortsTargetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * clientIP contains the configurations of Client IP based session affinity.
 *
 * @schema KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp
 */
export interface KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp {
  /**
   * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
   *
   * @schema KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp(obj: KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

